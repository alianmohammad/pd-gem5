--- i8254xGBe.hh
+++ i8254xGBe.hh
@@ -86,7 +87,30 @@
 
     // Number of bytes copied from current RX packet
     unsigned pktOffset;
+    uint64_t arrivalRate;       //m.alian
+    uint64_t rateTh;            //m.alian threshold of changing freq arrival rates more that this
+    Tick rateTimerInterval;     //m.alian interval for rate calculation
+    uint64_t rxBitCounter;      //m.alian conter for bytes
+    bool enable_rate_calc;      //m.alian flag to enable or disable rate counter from command line
+    bool first_arrival;
+    bool disable_governor; //m.alian disbale or enable governor
+    Tick disable_freq_change_interval; //m.alian interval for govenor to sleep after it changed freq
+    int rateAboveLowThCounter;      //m.alian num of consequative intervals which arrival rate is above low_th
+    int rate_above_th;  //m.alian <parameter> change frequency when num of consequative intervals which arrival rate is above low_th is more than this
+    uint64_t rateTh_low;        //m.alian low threshold of changing freq arrival rates
+    void calcRate(){    //m.alian
+        DPRINTF(EthernetTiming,"arivalRate=%lu,rxBitCounter=%lu,rateTimerInterval=%lu\n",arrivalRate,rxBitCounter,rateTimerInterval);
 
+        arrivalRate = rxBitCounter*1000000/rateTimerInterval;
+        rxBitCounter = 0;
+        schedule(rateCalcEvent, curTick() + rateTimerInterval);
+    }
+    EventWrapper<IGbE, &IGbE::calcRate> rateCalcEvent; //m.alian
+    void enableGovernor(){
+        DPRINTF(EthernetTiming,"Enable governor\n");
+        disable_governor = false;
+    }
+    EventWrapper<IGbE, &IGbE::enableGovernor> enableGovernorEvent; //m.alian
     // Delays in managaging descriptors
     Tick fetchDelay, wbDelay;
     Tick fetchCompDelay, wbCompDelay;
